import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { createExpenseAPI, getExpensesAPI, updateExpenseAPI, deleteExpenseAPI, getExpenseByLoadId } from './expenseApi';
import { IExpense, IUpdateExpense } from './interfaces';

export interface IExpenseState {
  value: IExpense[];
  status: 'idle' | 'loading' | 'failed';
}

interface IUpdateExpenseThunk extends  IUpdateExpense{
  expenseId: string
}
const initialState: IExpenseState = {
  value: [],
  status: 'idle',
};

export const createExpense = createAsyncThunk(
  'Expense/createExpense',
  async (ExpenseDetails: IExpense) => {
    const response = await createExpenseAPI(ExpenseDetails);
    return response;
  }
);

export const deleteExpense = createAsyncThunk(
  'Expense/createExpense',
  async (expenseId: string) => {
    const response = await deleteExpenseAPI(expenseId);
    return response;
  }
);

export const updateExpense = createAsyncThunk(
  'Expense/updateExpense',
  async (ExpenseDetails: IUpdateExpenseThunk) => {
    const response = await updateExpenseAPI(ExpenseDetails, ExpenseDetails.expenseId);
    // The value we return becomes the `fulfilled` action payExpense
    return response;
  }
);

export const getExpensesByLoad = createAsyncThunk(
  'Expense/getExpenses',
  async (loadIds: string[]) => {
    const response = await getExpenseByLoadId(loadIds);
    return response;
  }
);

export const ExpenseSlice = createSlice({
  name: 'expenses',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getExpensesByLoad.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getExpensesByLoad.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(getExpensesByLoad.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// export const { createExpenses } = ExpenseSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
export const selectExpenses = (state: RootState) => state.expenses.value;

export default ExpenseSlice.reducer;
