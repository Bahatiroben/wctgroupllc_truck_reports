import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { createDriverAPI, getDriversAPI, updateDriverAPI, deleteDriverAPI } from './driverApi';
import { IDriver, IUpdateDriver } from './interfaces';
import {omit} from 'lodash'

export interface IDriverState {
  value: IDriver[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IDriverState = {
  value: [],
  status: 'idle',
};

export const createDriver = createAsyncThunk(
  'driver/createDriver',
  async (driverDetails: IDriver) => {
    const response = await createDriverAPI(driverDetails);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateDriver = createAsyncThunk(
  'driver/updateDriver',
  async (driverDetails: IDriver) => {
    const response = await updateDriverAPI(omit(driverDetails, ['_id', 'createdAt', 'updatedAt', '__v']), driverDetails._id as string);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const deleteDriver = createAsyncThunk(
  'driver/deleteDriver',
  async (driverId: string) => {
    const response = await deleteDriverAPI(driverId);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const getAllDrivers = createAsyncThunk(
  'drivers/getAllDrivers',
  async () => {
    const response = await getDriversAPI();    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const driverSlice = createSlice({
  name: 'drivers',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllDrivers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllDrivers.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload.map((entry: IDriver) => omit(entry, ['__v']));
      })
      .addCase(getAllDrivers.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

// export const { createDrivers } = driverSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
export const selectDrivers = (state: RootState) => state.drivers.value;

export default driverSlice.reducer;
